#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Packages-AutoBuild

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
  # push: 
  #   branches:
  #     - master
  #schedule:
   # - cron: 0 1 */3 * *

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: Ubuntu-20.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64,All_RM2100]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "DIY_SH2=${DIY_SH2}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_MYPAN=${UPLOAD_MYPAN}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "All_RM2100" ]; then
            echo "MTARGET=mipsel_24kc" >> $GITHUB_ENV
            elif [ ${{matrix.target}} == "x86_64" ]; then
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        else
            echo "MTARGET=aarch64_generic" >> $GITHUB_ENV
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync upx-ucl
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        svn co https://github.com/gogogojason/OpenWrt/trunk/devices openwrt/devices
        if [ ${{matrix.target}} == "All_RM2100" ]; then
            wget -cO sdk.tar.xz https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-sdk-ramips-mt7621_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        elif [ ${{matrix.target}} == "x86_64" ]; then
            wget -cO sdk.tar.xz https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        else
            wget -cO sdk.tar.xz https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        fi
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 openwrt /mnt/openwrt/dl /mnt/openwrt/build_dir/hostpkg openwrt/build_dir /mnt/openwrt/bin
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
        ln -sf /mnt/openwrt/bin openwrt/bin
        
    - name: Load && Update feeds
      run: |
        tar -xJf sdk.tar.xz -C openwrt
        rm -Rf sdk.tar.xz
        cd openwrt
        cp -rf ./openwrt-sdk*/. ./ || true
        sed -i '/\(tools\|toolchain\)\/Makefile/d' Makefile
        ln -sf /usr/bin/python staging_dir/host/bin/python
        ln -sf /usr/bin/python staging_dir/host/bin/python3
        mv -f ../devices ./
        cp -rf devices/common/. ./
        cp -rf devices/${{matrix.target}}/. ./
        ./scripts/feeds update -a

    - name: Load custom configuration
      run: |
        cd openwrt
        chmod +x devices/common/*
        chmod +x devices/${{matrix.target}}/*
        /bin/bash "devices/common/$DIY_SH"
        /bin/bash "devices/common/$DIY_SH2"
        /bin/bash "devices/common/custom.sh"
        if [ -f "devices/${{matrix.target}}/$DIY_SH" ]; then
          /bin/bash "devices/${{matrix.target}}/$DIY_SH"
        fi
        if [ -f "devices/${{matrix.target}}/custom.sh" ]; then
          /bin/bash "devices/${{matrix.target}}/custom.sh"
        fi
        cp -Rf ./diy/* ./      
        cp -f devices/common/default-settings package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
        if [ -f "devices/${{matrix.target}}/default-settings" ]; then
         echo >> package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
         cat devices/${{matrix.target}}/default-settings >> package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
        fi
        mv devices/common/$CONFIG_FILE .config
        if [ -f "devices/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/$CONFIG_FILE >> .config
        fi

    - name: Apply patches
      run: |
        cd openwrt
        find "devices/common/patches" -type f ! -path 'devices/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "devices/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "devices/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi
        
        echo "修改地址"
        sed -i 's/firmware\/redmi-ac2100/firmware\/${{matrix.target}}/g' feeds/custom/luci-app-gpsysupgrade/root/usr/bin/upgrade.lua
        sed -i 's/firmware\/redmi-ac2100/firmware\/${{matrix.target}}/g' feeds/custom/luci-app-gpsysupgrade/luasrc/model/cbi/gpsysupgrade/sysupgrade.lua  
              
    - name: SSH connection to Actions
      uses: garypang13/debugger-action@master
      if: contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        if [[ "${{github.event.action}}" == *j1* ]]; then
          make -j1 V=s
        else
          make -j$(($(nproc)+1)) || make -j1 V=s
        fi
        echo "status=success" >> $GITHUB_ENV

    - name: Organize files
      id: organize
      run: |
        mkdir packages
        cp -Rf openwrt/bin/packages/*/custom/* packages/
        cp -Rf openwrt/bin/packages/*/packages/python3* packages/
        cp openwrt/.config  packages/${{matrix.target}}_packages.config
        cp -Rf devices/common/addons/* packages/
        if [ -n "$(ls -A "devices/${{matrix.target}}/addons" 2>/dev/null)" ]; then
         cp -Rf devices/${{matrix.target}}/addons/* packages/
        fi
        bash devices/common/opkg
        echo "FIRMWARE=$PWD/packages" >> $GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s)
        rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >> $GITHUB_ENV
        echo "!packages/" >.git-ftp-include

    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "COWURL=$cowurl" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $cowurl ${{ env.EMOJI }} 🚀"
 
    - name: Upload firmware to WeTransfer
      if: env.UPLOAD_WETRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "WETRANS=$wetrans" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $wetrans ${{ env.EMOJI }} 🚀"
        
    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "墙内加速下载 🚀:\n" >> release.txt
        echo -e "[腾讯云] (http://openwrt.ink:8666/firmware/${{matrix.target}}/ ☁)\n" >> release.txt
        [ ${{ env.WETRANS }} ] && echo -e "[WeTransfer] (${{ env.WETRANS }} 🗽)\n" >> release.txt
        [ ${{ env.COWURL }} ] && echo -e "[奶牛上传] (${{ env.COWURL }} 🐮)\n" >> release.txt
        [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true

    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: 上传固件到网盘
      uses: AEnterprise/rsync-deploy@v1.0 
      if: env.UPLOAD_MYPAN == 'true'
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} 
        ARGS: -avzr --exclude=
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        FOLDER: packages/
        SERVER_IP: ${{ secrets.SSH_HOST }} 
        USERNAME: ${{ secrets.SSH_USERNAME }} 
        SERVER_DESTINATION: /mnt/disk2/appdata/h5ai/Packages/${{ env.MTARGET }}/

    - name: Upload packages for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: ${{ env.date3 }} ${{ env.MTARGET }}
        path: ${{ env.FIRMWARE }}

    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        [ ${{ env.status }} == 'success' ] && curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=🎉OpenWrt_${{ env.date3 }}_${{ env.MTARGET }}软件仓库已更新😋|| curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=❌OpenWrt_${{ env.date3 }}_${{ env.MTARGET }}软件仓库更新失败😂

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
